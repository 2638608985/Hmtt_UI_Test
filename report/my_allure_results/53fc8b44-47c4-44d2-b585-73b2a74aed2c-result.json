{"name": "test_select_channel", "status": "broken", "statusDetails": {"message": "TypeError: 'dict' object is not callable", "trace": "element = <appium.webdriver.webelement.WebElement (session=\"ac4bdbca-664a-44af-bcd2-54351aba95b8\", element=\"6\")>\nlocation = ('link text', 'js'), direction = 'left', circulation = False\n\n    @staticmethod\n    def find_elt_by_channel(element, location, direction, circulation=False):\n        \"\"\"\n        在滚动区域内查找元素对象\n        :param element: 滚动区域元素\n        :type element: WebElement\n        :param location: (By.XXX, \"XXX\")\n        :type location:\n        :param direction: 滑动方向：up->上，below->下，left->左，right->右\n        :type direction:str\n        :param circulation:滚动是否循坏\n        :return:boole\n        :rtype:\n        \"\"\"\n        # 获取当前滚动元素的信息\n        print(element.__str__(), \"---------------------344\")\n        while True:\n            try:\n>               element.find_element(*location)\n\nbase\\app_base\\base_page.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webelement.WebElement (session=\"ac4bdbca-664a-44af-bcd2-54351aba95b8\", element=\"6\")>, by = 'link text', value = 'js'\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> T:\n        \"\"\"Find an element given a By strategy and locator\n    \n        Override for Appium\n    \n        Prefer the find_element_by_* methods when possible.\n    \n        Args:\n            by: The strategy\n            value: The locator\n    \n        Usage:\n            element = element.find_element(By.ID, 'foo')\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`\n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self._w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n        return self._execute(RemoteCommand.FIND_CHILD_ELEMENT,\n>                            {\"using\": by, \"value\": value})['value']\n\nc:\\users\\zbl\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\appium\\webdriver\\webelement.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webelement.WebElement (session=\"ac4bdbca-664a-44af-bcd2-54351aba95b8\", element=\"6\")>, command = 'findChildElement'\nparams = {'id': '6', 'sessionId': 'ac4bdbca-664a-44af-bcd2-54351aba95b8', 'using': 'link text', 'value': 'js'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nc:\\users\\zbl\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"ac4bdbca-664a-44af-bcd2-54351aba95b8\")>, driver_command = 'findChildElement'\nparams = {'id': '6', 'using': 'link text', 'value': 'js'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nc:\\users\\zbl\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002028256ABE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Locator Strategy \\'link text\\' is not suppor...nCallback (timers.js:696:18)\\\\n    at tryOnImmediate (timers.js:667:5)\\\\n    at processImmediate (timers.js:649:5)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\nc:\\users\\zbl\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002028256ABE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Locator Strategy \\'link text\\' is not suppor...nCallback (timers.js:696:18)\\\\n    at tryOnImmediate (timers.js:667:5)\\\\n    at processImmediate (timers.js:649:5)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\nc:\\users\\zbl\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002028256ABE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Locator Strategy \\'link text\\' is not suppor...nCallback (timers.js:696:18)\\\\n    at tryOnImmediate (timers.js:667:5)\\\\n    at processImmediate (timers.js:649:5)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: Locator Strategy 'link text' is not supported for this session\n\nc:\\users\\zbl\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <case.app.test_home.Test_Home object at 0x0000020282550160>\n\n    @pytest.mark.run(order=2)\n    def test_select_channel(self):\n        print(\"--------------2---------------test_select_channel-------------2--------------\")\n        location = (By.LINK_TEXT, \"js\")\n>       HomeProxy().select_channel(location)\n\ncase\\app\\test_home.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\app\\home.py:54: in select_channel\n    self.find_elt_by_channel(channel_elt, location, \"left\")\nbase\\app_base\\base_page.py:351: in find_elt_by_channel\n    BaseHandle().slide_element(element, direction, 2000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.app_base.base_page.BaseHandle object at 0x0000020282583908>\nelement = <appium.webdriver.webelement.WebElement (session=\"ac4bdbca-664a-44af-bcd2-54351aba95b8\", element=\"6\")>, direction = 'left'\nduration = 2000\n\n    def slide_element(self, element: WebElement, direction, duration):\n        \"\"\"\n        元素内滑动\n        :param element: 元素\n        :type element: WebElement\n        :param direction: 滑动方向：up->上，below->下，left->左，right->右\n        :type direction: str\n        :param duration:持续时间(毫秒)\n        :rtype:int\n        :return:\n        :rtype:\n        \"\"\"\n>       elt_location = element.location()\nE       TypeError: 'dict' object is not callable\n\nbase\\app_base\\base_page.py:182: TypeError"}, "start": 1598542599728, "stop": 1598542600093, "uuid": "b726b4c5-6e92-4d91-955e-f852690a9ab2", "historyId": "2fed20ee437a4f794218079cbaf2c8f1", "testCaseId": "4d59f270b9671b07dab38666d66bb9b3", "fullName": "case.app.test_home.Test_Home#test_select_channel", "labels": [{"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "case.app"}, {"name": "suite", "value": "test_home"}, {"name": "subSuite", "value": "Test_Home"}, {"name": "host", "value": "DESKTOP-P5SPH9F"}, {"name": "thread", "value": "97836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.app.test_home"}]}